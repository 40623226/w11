<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20170108171605.1"><vh>@settings</vh>
<v t="yen.20170108171605.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="yen.20170108171605.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="yen.20170108171622.1"><vh>有關 2017fall CADP &amp; CP</vh></v>
<v t="yen.20170108171733.1" a="E"><vh>@path ../</vh>
<v t="leo.20170912150642.1" a="E"><vh>近端無 disqus</vh>
<v t="yen.20170108171733.2"><vh>@button pelican-blog</vh></v>
</v>
<v t="leo.20170912150710.1" a="E"><vh>有 disqus 論壇</vh>
<v t="leo.20170912150710.2"><vh>@button github-blog</vh></v>
</v>
<v t="yen.20170108171733.3"><vh>@edit README.md</vh></v>
<v t="yen.20170108171733.4"><vh>@edit .gitignore</vh></v>
<v t="yen.20170108171733.5" a="E"><vh>Pelican 設定</vh>
<v t="leo.20170912145121.1" a="E"><vh>近端</vh>
<v t="yen.20170108171733.6"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="leo.20170912145144.1" a="E"><vh>遠端</vh>
<v t="leo.20170912145153.1"><vh>@edit publishconf.py</vh></v>
</v>
<v t="leo.20170912145133.1"><vh>共用</vh></v>
<v t="yen.20170108171733.7"><vh>@edit pelicanconf.py</vh></v>
</v>
<v t="yen.20170224232341.1" a="E"><vh>編輯 template</vh>
<v t="yen.20170224232341.2" a="E"><vh>@path theme/pelican-bootstrap3_local/templates</vh>
<v t="yen.20170224232341.3"><vh>@edit base.html</vh></v>
</v>
<v t="leo.20170912210747.1" a="E"><vh>@path theme/pelican-bootstrap3/templates</vh>
<v t="leo.20170912210747.2"><vh>@edit search.html</vh></v>
<v t="leo.20170912210747.4"><vh>@edit article.html</vh></v>
<v t="leo.20170912210747.3"><vh>@edit base.html</vh></v>
</v>
</v>
<v t="yen.20170108171733.8" a="E"><vh>@clean index.html</vh>
<v t="yen.20170108171733.9" a="E"><vh>html</vh>
<v t="yen.20170108171733.10"><vh>head</vh></v>
<v t="yen.20170108171733.11" a="E"><vh>body</vh>
<v t="yen.20170108171733.12" a="E"><vh>reveal div</vh>
<v t="yen.20170108171733.13" a="E"><vh>slides div</vh>
<v t="yen.20170108171733.14"><vh>封面投影片</vh>
<v t="yen.20170108171733.15"><vh>封面投影片內容</vh></v>
</v>
<v t="yen.20170108171733.16"><vh>W1-W3</vh>
<v t="yen.20170108171733.17"><vh>準備與鼓勵</vh></v>
</v>
<v t="leo.20170911090822.1" a="E"><vh>W4-W6</vh>
<v t="leo.20170911090822.2"><vh>W4-W6</vh></v>
</v>
<v t="leo.20170911091459.1" a="E"><vh>期中考週</vh>
<v t="leo.20170911091508.1"><vh>w7-w9</vh>
<v t="leo.20170911091508.2"><vh>w7-w9</vh></v>
</v>
<v t="leo.20170911091622.1"><vh>如何學好 Python3</vh></v>
<v t="leo.20170911100148.1"><vh>如何學習 CAD</vh>
<v t="leo.20170911100148.2"><vh>CAD 學習</vh></v>
</v>
<v t="leo.20170911100657.1"><vh>MCADP 實習</vh></v>
</v>
<v t="leo.20170911093601.1"><vh>心得</vh>
<v t="leo.20170911093601.2" a="E"><vh>心得</vh>
<v t="leo.20170911093601.3"><vh>我的心得</vh></v>
</v>
</v>
<v t="leo.20170911095149.1"><vh>筆記</vh>
<v t="leo.20171117013128.1" a="E"><vh>筆記</vh>
<v t="leo.20171117010423.2"><vh>筆記</vh></v>
<v t="leo.20171117012137.1"><vh>筆記(2)</vh></v>
<v t="leo.20171117012310.1"><vh>筆記(3)</vh></v>
</v>
</v>
<v t="leo.20180108114412.1"><vh>封面投影片</vh>
<v t="leo.20180108114412.2"><vh>封面投影片內容</vh></v>
</v>
<v t="leo.20180108114540.1"><vh>W10-W11</vh>
<v t="leo.20180108114540.2"><vh>W10-11</vh></v>
</v>
<v t="leo.20180108114538.1"><vh>W12</vh>
<v t="leo.20180108114538.2"><vh>W12</vh></v>
</v>
<v t="leo.20180108114614.1"><vh>W13</vh>
<v t="leo.20180108114614.2"><vh>W13</vh></v>
</v>
<v t="leo.20180108114615.1"><vh>W14</vh>
<v t="leo.20180108114615.2"><vh>W14</vh></v>
</v>
<v t="leo.20180108114617.1"><vh>W15-W16</vh>
<v t="leo.20180108114617.2"><vh>W15-16</vh></v>
</v>
<v t="leo.20180108115541.1" a="E"><vh>心得</vh>
<v t="leo.20180108115541.2" a="E"><vh>心得</vh>
<v t="leo.20180108115541.3"><vh>我的心得</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="yen.20170108171733.71" a="E"><vh>@path content</vh>
<v t="yen.20170920223844.1"><vh>@edit 20170920.md</vh></v>
<v t="leo.20171003222155.1"><vh>@clean 20171003.md</vh>
<v t="leo.20171003222155.2"><vh>ex1 - for 迴圈</vh></v>
<v t="leo.20171003222155.3"><vh>ex2 - input 與單位換算</vh></v>
<v t="leo.20171003222155.4"><vh>ex3 - jansen 多連桿機構</vh></v>
<v t="leo.20171003230621.1"><vh>ex4 -turtle 網際繪圖</vh></v>
<v t="leo.20171003222155.5"><vh>filereader</vh></v>
</v>
<v t="leo.20171012104230.1"><vh>@edit 20171012.md</vh></v>
<v t="len.20171023213432.1"><vh>@clean 20171023.md</vh></v>
<v t="leo.20171030162134.1"><vh>@clean 20171030.md</vh></v>
<v t="leo.20180108104641.1"><vh>@clean 20171113.md</vh></v>
<v t="leo.20180108104642.1"><vh>@clean 20171120.md</vh></v>
<v t="leo.20180108104648.1"><vh>@clean 20171127.md</vh></v>
<v t="leo.20180108104650.1"><vh>@clean 20171204.md</vh></v>
<v t="leo.20180108104644.1"><vh>@clean 20171211.md</vh></v>
<v t="leo.20180108104646.1"><vh>@clean 20171218.md</vh></v>
<v t="leo.20180108104645.1"><vh>@clean 20171225.md</vh></v>
<v t="yen.20170108171733.81" a="E"><vh>@path pages</vh>
<v t="yen.20170108171733.82"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="yen.20170108171733.83"><vh>產生 .key 與 .crt</vh></v>
</v>
<v t="yen.20170108171930.1"><vh>@button https server</vh></v>
<v t="yen.20170108171939.1"><vh>@button ipv6 https server</vh></v>
<v t="leo.20171016221327.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20171016221327.3"><vh>Recovered node "ex2 - input 與單位換算" from @clean 20171003.md</vh>
<v t="leo.20171016221327.4"><vh>old:ex2 - input 與單位換算</vh></v>
<v t="leo.20171016221327.5"><vh>new:ex2 - input 與單位換算</vh></v>
</v>
<v t="leo.20171016221327.6"><vh>Recovered node "ex4 -turtle 網際繪圖" from @clean 20171003.md</vh>
<v t="leo.20171016221327.7"><vh>old:ex4 -turtle 網際繪圖</vh></v>
<v t="leo.20171016221327.8"><vh>new:ex4 -turtle 網際繪圖</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="len.20171023213432.1">@language md
Title: 2017 Fall CP W7 Exam
Date: 2017-10-23 11:00
Category: Course
Tags: 2017fall, CP, W7, Exam
Slug: 40623226_2017-fall-cp-w7-exam
Author: 40623226

W7 Exam

&lt;!-- PELICAN_END_SUMMARY --&gt;


###操作影片

&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/uCH87Dv2tSQ" frameborder="0" gesture="media" allowfullscreen&gt;&lt;/iframe&gt;

###學習心得
上計算機雖然一堆程式碼令我困惱，但如果懂了的話並加以利用，就會變得方便，而且有些東西利用網誌管理會省時很多。

###自評成績

每週出席情況:  100%

紙本筆記:  90%

隨身碟內容:  85%

個人倉儲內容: 90%

各週上課摘要: 90%

自評分數 87</t>
<t tx="leo.20170911090822.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911090822.2"># W4-W6
* 學習操作leo
* 編輯自己網誌
* 透過leo進行近端與遠端的連結

</t>
<t tx="leo.20170911091459.1">&lt;section&gt;
    @others
&lt;/section&gt;


						
</t>
<t tx="leo.20170911091508.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911091508.2"># W7-W9

* 學習eric6程式
* 利用eric6製作計算機表單
* 學習python3語法</t>
<t tx="leo.20170911091622.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.1">&lt;section&gt;
    @others
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.3"># 我的心得

* 從第一週開始，對於計算機程式有點陌生，不過我下定決心不被當掉，所以當我上課沒聽清楚，回去宿舍就會透過老師上課錄的影片自己
慢慢摸索，到後來，我慢慢的找到了方向，從一開始的什麼都不會到現在可以編輯blog或者是製作投影片，雖然我不是對計算機很內行，但透過一步步踏實的學習也可以在程式操作上變得很熟練。
</t>
<t tx="leo.20170911095149.1">&lt;section&gt;
    @others
&lt;/section&gt;</t>
<t tx="leo.20170911100148.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911100148.2"># 如何學習 CAD

* CAD 為 Computer Aided Design
* 尤其是 Mechanical Computer Aided Design
* 2D/3D 繪圖是電腦輔助設計的表達方式之一
* 口語、文字、 2D、 3D、 數學與實作表達, 都很重要
* 2D/3D 繪圖採用 Solvespace 與 Onshape
* 熟悉近端與雲端 CAD 後, 可以再用其他  MCAD 工具
* 其他工具包括: SolidWorks, Inventor, Creo Parametric 等

</t>
<t tx="leo.20170911100657.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170912145121.1"></t>
<t tx="leo.20170912145133.1"></t>
<t tx="leo.20170912145144.1"></t>
<t tx="leo.20170912150642.1"></t>
<t tx="leo.20170912150710.1"></t>
<t tx="leo.20170912150710.2">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="leo.20170912210747.1"></t>
<t tx="leo.20171003222155.1">@language md
Title: 網際 Brython 3.3.4 程式執行環境 
Date: 2017-10-03 11:00
Category: Course
Tags: 2017fall, cp, brython, w4
Slug: 40623226-brython-editor-334
Author: 40623226

Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.

&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 FileSaver 與 filereader --&gt;
&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;
&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;


&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

### 利用以下的編輯器執行 Python3 程式

在 Firefox 中, 以 Preferences - General - Downloads 選擇 "Always ask me where to save files"

在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading

&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;
&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)
        

#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()
    
def clear_console(ev):
    doc["console"].value = ""

def clear_container(ev):
    doc["container"].clear()

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
doc['clear_container'].bind('click',clear_container)

&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;
&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;
&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;
&lt;div id="container"&gt;&lt;/div&gt;
@others
</t>
<t tx="leo.20171003222155.2">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈
</t>
<t tx="leo.20171003222155.3">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算

</t>
<t tx="leo.20171003222155.4">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''#jansen 多連桿機構驗算
from math import pi, cos, sin, sqrt, acos

radian = 180/pi
degree = pi/180

#PLAP
def plap(ax, ay, ac, bac, bx, by, ccw):
    if ccw == 1:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy

#PLLP
def pllp(ax, ay, ac, cb, bx, by, cw):
    if cw == 1:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

ax = -38
ay = 0
# b 為原點
bx = 0
by = 0
cx = 0
cy = 7.8
# m 為配合 PLAP 新增固定點
mx = 30
my = 7.8
# dcm ccw 方向角度
dcm = 30*degree
cd = 15
# 三角形 dcm 為 ccw plap d=(a, cd, dcm, m)
dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1)
print("dx=", dx, "dy=", dy)
# 三角形 aed 為 cw pllp e=(a, ae, ed, d)
ae = 41.5
ed = 50
ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1)
print("ex=", ex, "ey=", ey)
# 三角形 afe 為 cw pllp f=(a, af, fe, e)
af = 40.1
fe = 55.8
fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1)
print("fx=", fx, "fy=", fy)
# 三角形 dha 為 cw pllp h=(d, dh, ha, a)
dh = 61.9
ha = 39.3
hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1)
print("hx=", hx, "hy=", hy)
# 三角形 hgf 為 cw pllp g=(h, hg, gf, f)
hg = 36.7
gf = 39.4
gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1)
print("gx=", gx, "gy=", gy)
# 三角形 hkg 為 cw pllp k=(h, hk, kg, g)
hk = 49
kg = 65.7
kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1)
print("kx=", kx, "ky=", ky)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;&lt;a id="ex3"&gt;ex3&lt;/a&gt;-多連桿機構
</t>
<t tx="leo.20171003222155.5">
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def jansen(e):
    data = open("./../python_ex/jansen.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["jansen"].bind("click", jansen)
&lt;/script&gt;

&lt;!-- python3 tutorial1-tutorial7 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial(e):
    # 利用 e.target.text 取的對應按鈕的字串, 可以開啟對應的程式檔案
    data = open("./../python_ex/python3_"+e.target.text+".py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["tutorial1"].bind("click", tutorial)
document["tutorial2"].bind("click", tutorial)
document["tutorial3"].bind("click", tutorial)
document["tutorial4"].bind("click", tutorial)
document["tutorial5"].bind("click", tutorial)
document["tutorial6"].bind("click", tutorial)
document["tutorial7"].bind("click", tutorial)
&lt;/script&gt;

&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="jansen"&gt;jansen.py&lt;/button&gt;

&lt;button id="tutorial1"&gt;tutorial1&lt;/button&gt;&lt;button id="tutorial2"&gt;tutorial2&lt;/button&gt;&lt;button id="tutorial3"&gt;tutorial3&lt;/button&gt;&lt;button id="tutorial4"&gt;tutorial4&lt;/button&gt;&lt;button id="tutorial5"&gt;tutorial5&lt;/button&gt;&lt;button id="tutorial6"&gt;tutorial6&lt;/button&gt;&lt;button id="tutorial7"&gt;tutorial7&lt;/button&gt;

Jansen 多連桿機構尺寸圖:

&lt;img src="./../data/jansen_sympy.png" width="800" /&gt;

</t>
<t tx="leo.20171003230621.1">

&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.2"></t>
<t tx="leo.20171016221327.3">(uncached) leo.20171003222155.3
Diff...
  
  &lt;script type="text/python3"&gt;
  from browser import document as doc
  import script1
  
  def ex2(ev):
      script1.editor.setValue('''#溫度轉換程式
  from browser import document as doc
  
  # 因為此函式與滑鼠互動, 需要 event 當作輸入
  def convTemp():
      mystring = ""
      cdegree = input("請輸入攝氏溫度:")
      fdegree = float(cdegree)*9/5 + 32
      output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
      # 利用 print() 將轉換結果送到 console 區
      print(output_string)
  
  #直接呼叫 convTemp() 執行
  convTemp()
      ''')
      script1.editor.scrollToRow(0)
      script1.editor.gotoLine(0)
  doc['ex2'].bind('click',ex2)
- &lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算
?                                  -
+ &lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算- 
</t>
<t tx="leo.20171016221327.4">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算</t>
<t tx="leo.20171016221327.5">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算

</t>
<t tx="leo.20171016221327.6">(uncached) leo.20171003230621.1
Diff...
- 
  
  &lt;script type="text/python3"&gt;
  from browser import document as doc
  import script1
  
  def ex4(ev):
      script1.editor.setValue('''#ex4 turtle 網際繪圖
  import turtle
  t=turtle.Turtle()
  
  t.penup()
  t.left(45)
  t.backward(125)
  t.right(45)
  t.pendown()
  
  for c in ['red', 'green', 'yellow', 'blue']:
      t.color(c)
      t.forward(75)
      t.left(90)
  
  t1=turtle.Turtle("turtle")
  t1.penup()
  
  t1.pendown()
  t1.width(3)
  for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
      t1.color(c)
      t1.forward(50)
      t1.left(60)
  
  t1.penup()
  t1.left(60)
  t1.backward(120)
  
  t1.pendown()
  t1.color('red')
  t1.write("I love Brython!!")
  
  turtle._Screen().end()
      ''')
      script1.editor.scrollToRow(0)
      script1.editor.gotoLine(0)
  doc['ex4'].bind('click',ex4)
  &lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.7">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.8">

&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171030162134.1">@language md
Title: 2017 Fall CP W8 Exam
Date: 2017-10-30 16:00
Category: Course
Tags: 2017fall, CP, W8, Exam
Slug: 40623226_2017-fall-cp-w8-exam
Author: 40623226

W8 Exam

&lt;!-- PELICAN_END_SUMMARY --&gt;


###操作影片

&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/2_2kGejVWhU" frameborder="0" gesture="media" allowfullscreen&gt;&lt;/iframe&gt;

###學習心得
今天學習了關於python3程式碼的敘述，利用eric6完成calculator的編譯

###自評成績

每週出席情況:  100%

紙本筆記:  90%

隨身碟內容:  85%

個人倉儲內容: 90%

各週上課摘要: 90%

自評分數 87</t>
<t tx="leo.20171117010423.2"># 筆記

&lt;a href="https://cpb.kmol.info/40623226/raw/0bb3266f0c7cf575daeba80b94db15bfefca149821e264e4cf0eb00973327511?m=image/jpeg"&gt;
&lt;img src="https://cpb.kmol.info/40623226/raw/9b92af8415373f453cd7a607d6ca01ecf6d04850e87b916fe2cb78b0cc07620d?m=image/jpeg"&gt;&lt;width="900" height="900"&gt;&lt;/a&gt;
</t>
<t tx="leo.20171117012137.1">

&lt;a href="https://cpb.kmol.info/40623226/raw/b7e7642a55acb0c5a064d8570b025dbad215f1fb6010571b301a76b2281b52a5?m=image/jpeg"&gt;
&lt;img src="https://cpb.kmol.info/40623226/raw/13458e8740d1f4425a54ad7af3dca36879a0bcb5e8fca3857421c150a3e0be15?m=image/jpeg"&gt;&lt;width="900" height="900"&gt;&lt;/a&gt;</t>
<t tx="leo.20171117012310.1">

&lt;a href="https://cpb.kmol.info/40623226/raw/69e6d0e42e1ca720429264bb930e41f99dc5041ecea07a2aaf6afb5801b9b85e?m=image/jpeg"&gt;
&lt;img src="https://cpb.kmol.info/40623226/raw/3ee4f0f16c04a08be4f66604ef16e81598f9c577ed56c78026cdd6b8f3d4457f?m=image/jpeg"&gt;&lt;width="900" height="900"&gt;&lt;/a&gt;</t>
<t tx="leo.20171117013128.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;	</t>
<t tx="leo.20180108104641.1">@language md
Title: 2017 Fall CP 第十週
Date: 2017-11-13 11:00
Category: Course
Tags: 2017fall, CP, W10
Slug: 40623226_2017-fall-cp-w10
Author: 40623226

W10

&lt;!-- PELICAN_END_SUMMARY --&gt;

使用eric6產生計算機表單

下載dia portable

下載gimp portable

###客製化可攜環境

使用者可以配合需求修改 start.bat, stop.bat 以及 launchLeo.py, 讓系統啟動時, 自行建立進入特定目錄的命令列視窗, 並且自動開啟特定 Leo Editor 專案.

例如:

start.bat 改為:

@echo off

REM 設定 y 硬碟代號與 data 目錄對應

set Disk=y

subst %Disk%: "data"

REM 設定 leo 相關對應 Home 位置

set HomePath=%Disk%:\home

set HomeDrive=%Disk%:\home

set Home=%Disk%:\home

REM 將系統 Python 程式的 io 設為 utf-8

set PYTHONIOENCODING="utf-8"

REM 將後續的指令執行, 以 %Disk% 為主

%Disk%:

REM 設定 PYTHONPATH

set PYTHONPATH=%Disk%:\python36

REM 設定 Leo 所用的編輯器

set LEO_EDITOR=%Disk%:\wscite\SciTE.exe

REM for fossil https 連線設定

REM 若在近端使用 fossil ui 則要蓋掉

REM set HTTPS=on

REM 指令搜尋路徑設定

set path1=%Disk%:;%Disk%:\python36;%Disk%:\git\bin;%Disk%:\python36\Scripts;%Disk%:\Git\bin;
path=%path1%;

start /MIN %Disk%:\wscite\SciTE.exe

start /MIN %Disk%:\wscite\SciTE.exe

start /MIN cmd.exe

start /MIN cmd.exe

REM 啟動 cmd 之前先更換目錄到倉儲目錄

cd %Disk%:\tmp\fossil\wd\2017fall

start /MIN cmd.exe

REM 啟動 Leo 編輯器

%Disk%:\Python36\python.exe %Disk%:\launchLeo.py

REM 啟動 stunnel

REM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo

REM start /MIN stunnel.exe

launchLeo.py 改為:

#!/usr/bin/env python

""" Leo launcher script
A minimal script to launch leo.
"""

import leo.core.runLeo
leo.core.runLeo.run(fileName="y:/tmp/fossil/wd/2017fall/users/yen.leo")
</t>
<t tx="leo.20180108104642.1">@language md
Title: 2017 Fall CP 第十一週
Date: 2017-11-20 11:00
Category: Course
Tags: 2017fall, CP, W11
Slug: 40623226_2017-fall-cp-w11
Author: 40623226

W11

&lt;!-- PELICAN_END_SUMMARY --&gt;

https://github.com/40623224/w11

註冊github的帳戶.新增w11表單
將fossil的東西轉移到gitgub協同
</t>
<t tx="leo.20180108104644.1">@language md
Title: 2017 Fall CP 第十四週
Date: 2017-12-11 11:00
Category: Course
Tags: 2017fall, CP, W14
Slug: 40623226_2017-fall-cp-w14
Author: 40623226

W14

&lt;!-- PELICAN_END_SUMMARY --&gt;

1.請各組選一名代表, 負責建立 Github 期末協同專案倉儲

2. 以第一組為例, 專案倉儲名稱為 ag1_pyqt5_calculator

3. 在此倉儲新增 gh-pages 分支, 然後設為 default branch

3. 將所有組員設為協同者 (collaborators)

4. 確定各組員都已回覆, 同意為協同者

5. 各組員必須確定 y:/home/.gitconfig 下為各自的 github 身分

git config --global user.name "學號"
git config --global user.email "學號@gm.nfu.edu.tw"
git config --global http.proxy http://proxy.kmol.info:3128
git add .

表示要新增所有改版的內容

git commit -m "改版訊息"

表示要在所有的改版內容資料, 綁定身分與訊息

git push

將近端所提交的改版資料推送到遠端

git pull

若遠端已經有近端沒有的版本資料, 近端用戶
必須拉下遠端的版本資料, 嘗試進行自動合併
但是若無法自動合併, 則必須要進行手動合併
在 fossil 使用 fossil update 拉下遠端資料</t>
<t tx="leo.20180108104645.1">@language md
Title: 2017 Fall CP 第十六週
Date: 2017-12-25 11:00
Category: Course
Tags: 2017fall, CP, W16
Slug: 40623226_2017-fall-cp-w16
Author: 40623226

計算機程式

&lt;!-- PELICAN_END_SUMMARY --&gt;

按鍵分類

0 ~9 數字按建, 點按後由 digitClicked() 方法槽承接處理
直接運算元, 包括 Sqrt, x^2 與 1/x, 點按後由 unaryOperatorClicked() 方法槽承接處理
加或減運算元, 包括 + 與 - 運算, 點按後由 additiveOperatorClicked() 方法槽承接處理
乘或除運算元, 包括 * 與 / 運算, 點按後由 multiplicativeOperatorClicked() 方法槽承接處理
其餘按鍵則各自以特定的方法槽承接處理
變數與運算流程考量

數字按鍵以 zero, one, two, three, four, five, six, seven, eight, nine 命名
顯示幕以 display 命名
等號以 equalButton 命名
與 MS, M+, 或 MC 按鍵相關的計算機記憶體數值, 存入 sumInMemory 變數對應的記憶空間
以 sumSoFar 儲存累計數值, 使用者按下等號後, sumSoFar 重新計算結果, 並顯示在 display 幕, Clear All 按鍵則重置 sumSoFar 為 0
以 factorSoFar 儲存乘或除運算子運算過程所得的暫存數值
以 pendingAdditiveOperator 儲存使用者最後點按的加或減運算子字串
以 pendingMultiplicativeOperator 儲存使用者最後點按的乘或除運算子字串
以 waitingForOperand 界定使用者是否處理運算數輸入階段, 若 waitingForOperand 為 True, 表示計算機正在等待使用者"開始"輸入運算數
waitingForOperand 起始值為 True, 只有重新進入 digitClicked 方法, display 才會 clear(), 否則在顯示幕非為 0 的情況下, 將堆疊數字字串
因為考量先乘除後加減運算順序, 將加減與乘除處理方法分開, 若使用者輸入加減運算子後, 緊接乘除運算子, 計算機會先乘除運算後再加減
直接運算元可以在使用者按下按鍵後, 直接對 display 中的數值進行處理, 無需其他暫存需求
pendingAdditiveOperator, pendingMultiplicativeOperator, sumSoFar, factorSoFar 與 waitingForOperand, 在 Dialog 類別建構子中設定起始值
數字按鍵點按處理

使用者點按數字按鍵, 將會送出該按鍵的 clicked() 訊號
按鍵的 clicked() 訊號將會根據設定, 觸發 digitClicked() 方法槽
由於 PyQt5 的 Push Button 以 Qt5 中的 QObject::sender() 送出訊號, 此函式會傳回 sender 作為 QObject 的指標
因為此一與 Push Button 配合的 sender 為 Button 物件, 因此可以在 digitClicked() 函式中, 利用 sender().text() 取得按鍵的 text 字串
假如使用者點按 0, display 顯示字串 0, 但是若一開始輸入兩個以上的 0, digitClicked() 應該仍只顯示 0 字串
但是若計算機處於等待新運算數輸入時 (以 waitingForOperand 判定), 新數字在顯示前, display 應該要清除先前所顯示的數字
最後, 除了在顯示幕為 0 之後的 0 按鍵輸入, digitClicked() 方法槽不會繼續判定是否清除顯示幕或堆疊數字字串外, 所按的數字將會堆疊顯示
直接運算按鍵處理

Sqrt, x^2 與 1/x 等按鍵的處理方法為 unaryOperatorClicked(), 與數字按鍵的點按回應相同, 透過 sender().text() 取得按鍵上的 text 字串
unaryOperatorClicked() 方法隨後根據 text 判定運算子後, 利用 display 上的運算數進行運算後, 再將結果顯示在 display 顯示幕
若進行運算 Sqrt 求數值的平方根時, 顯示幕中為負值, 或 1/x 運算時, x 為 0, 都視為無法處理的情況, 以呼叫 abortOperation() 處理
abortOperation() 方法則重置所有起始變數, 並在 display 中顯示 "####"
直接運算子處理結束前, 運算結果會顯示在 display 中, 而且運算至此告一段落, 計算機狀態應該要回復到等待新運算數的階段, 因此 waitingForOperand 要重置為 True
加或減按鍵處理

使用者按下加或減運算子按鍵時, 程式設定以 additiveOperatorClicked() 處理
進入 additiveOperatorClicked() 後, 必須先查是否有尚未運算的乘或除運算子, 因為必須先乘除後才能加減
先處理乘與除運算後, 再處理加或減運算後, 將 sumSoFar 顯示在 display 後, 必須重置 sumSoFar 為 0, 表示運算告一段落
乘或除按鍵處理

使用者按下乘或除運算子按鍵時, 程式設定以 multiplicativeOperatorClicked() 處理
進入 multiplicativeOperatorClicked() 後, 無需檢查是否有尚未運算的加或減運算子, 因為乘除運算有優先權
先處理乘與除運算後, 再處理加或減運算, 將 sumSoFar 顯示在 display 後, 必須重置 sumSoFar 為 0, 表示運算告一段落
小數點按鍵處理

使用者按下小數點按鍵後, 以 pointClicked() 方法處理, 直接在 display 字串中加上 "." 字串
數值變號按鍵處理

使用者按下變號按鍵後, 由 changeSignClicked() 處理, 若顯示幕上為正值, 則在 display 字串最前面, 疊上 "-" 字串
假如顯示幕上為負值, 則設法移除 display 上字串最前方的 "-" 字元
退格按鍵處理

使用者按下退格按鍵後, 由 backspaceClicked() 處理, 這時可以利用 Python 字串數列中的 [:-1], 保留除了最後一個字元的字串
離開 backspaceClicked() 前 ,將顯示幕中原有字串的 [:-1] 字串, 顯示在 display 上
若退格後 display 上為空字串, 則顯示 0, 並且將 waitingForOperand 起始設為 True, 表示等待新運算數中
清除按鍵處理

使用者按下 Clear 按鍵後, 以 clear() 方法處理, 進入函式後, 將現有的運算數重置為 0
離開 clear() 前, 將 waitingForOperand 起始設為 True, 表示等待新運算數中
ClearAll 按鍵, 則將所有變數全部重置為起始狀態
記憶體按鍵處理

clearMemory() 方法與 "MC" 按鍵對應, 清除記憶體中所存 sumInMemory 設為 0
readMemory() 方法與 "MR" 按鍵對應, 功能為讀取記憶體中的數值, 因此將 sumInMemory 顯示在 display, 作為運算數
setMemory() 方法則與 "MS" 按鍵對應, 功能為設定記憶體中的數值，因此取 display 中的數字, 存入 sumInMemory
addToMemory() 方法與 "M+" 按鍵對應, 功能為加上記憶體中的數值, 因此將 sumInMemory 加上 display 中的數值
因為 setMemory() 與 addToMemory() 方法, 都需要取用 display 上的數值, 因此必須先呼叫 equalClicked(), 以更新 sumSoFar 與 display 上的數值
calculate() 方法

calculate() 方法中的運算, 以 rightOperand 為右運算數
當執行加或減運算時, 左運算數為 sumSoFar
當執行乘或除運算時, 左運算數為 factorSoFar
若運算過程出現除與 0 時, 將會回傳 False</t>
<t tx="leo.20180108104646.1">@language md
Title: 2017 Fall CP 第十五週
Date: 2017-12-18 11:00
Category: Course
Tags: 2017fall, CP, W15
Slug: 40623226_2017-fall-cp-w15
Author: 40623226

W15

&lt;!-- PELICAN_END_SUMMARY --&gt;

git指令:
git branch
git status
git add .
git config --global user.name "學號"(先綁定才能add.)
git config --global user.email "email"(先綁定才能add.)
git commit -m "____"
git push
git config --global http.proxy http://140.130.17.42:3128

cmd指令:
nslookup伺服器IP查詢
proxy.kmol.info
server 伺服器IP
ping IP
ping -t IP
ctrl+C 退出

git config --global http.proxy http://proxy.kmol.info:3128

影片一:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/LDppozww-vo" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

期末專案執行相關期程規劃與內容提要

影片二:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/HGMCvzLltko" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

利用 Pandoc 與 MikTeX 協同編寫期末報告
</t>
<t tx="leo.20180108104648.1">@language md
Title: 2017 Fall CP 第十二週
Date: 2017-11-27 11:00
Category: Course
Tags: 2017fall, CP, W12
Slug: 40623226_2017-fall-cp-w12
Author: 40623226

W12

&lt;!-- PELICAN_END_SUMMARY --&gt;

影片一:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/erJKtgygLnU" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

設定 git clone 的連線條件, 以及視窗程式在機電系統控制上的應用

影片二:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/jdzFJs-dSJg" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

在 Qt Design 所產生的對話框程式中加入數字顯示邏輯
</t>
<t tx="leo.20180108104650.1">@language md
Title: 2017 Fall CP 第十三週
Date: 2017-12-04 11:00
Category: Course
Tags: 2017fall, CP, W13
Slug: 40623226_2017-fall-cp-w13
Author: 40623226

W13

&lt;!-- PELICAN_END_SUMMARY --&gt;

https://github.com/40623224/w13

C-K Design Theory
Using C-K Theory

http://www.openinnovate.co.uk/papers/CK_KnowledgeMgt_OpenInnovation.pdf

連接 (Conjunction) (C-&gt;K): 概念經過實際驗證, 成為知識空間的延伸, 此概念即脫離概念空間. 未被實際驗證的概念, 則留在概念空間之中.

分離 (Disjunction): (K-&gt;C): 由知識產生新構想, 反映出從知識到概念的轉換過程.

C -&gt; C: 概念可以從原始概念長出新概念, 也能產生多種新概念, 與其他概念同時存在概念空間. 為達有效創新, 必須利全力導引概念成長與衍生流程.

K -&gt; K: 以新的組合或發現, 持續擴展知識.

PyQt5 Tutorial
https://github.com/Programmica/pyqt5-tutorial

Finite State Machine and the Cheap Calculator:

https://www.clear.rice.edu/comp212/08-spring/labs/12/

UML in python
https://github.com/PyCQA/pylint/

Python and UML
https://bitbucket.org/tzulberti/pywebuml
</t>
<t tx="leo.20180108114412.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114412.2">## 計算機程式 期末

###投影片 
# 40623226

[我的網誌](blog/index.html)


</t>
<t tx="leo.20180108114538.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114538.2"># W12

* 認識git倉儲並學會使用多人協同而不是    單獨一個人做完整件工作
* 設定 git 的連線條件 並了解proxy及修改，在學校用老師proxy IP回去後則不需使用

* 初步了解機算機程式碼及在 Qt Design 所產生的對話框程式中加入數字顯示邏輯

</t>
<t tx="leo.20180108114540.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114540.2"># W10~W11

* 修改 start.bat, stop.bat 以及 launchLeo.py

* 利用 Eric6 完成計算機對話框所需按鍵的配置, 如何使用格點佈局, 如何設定 Dialog, pressButton 與 lineEdit 物件的尺寸大小, 如何命名物件, 如何設定 clicked 與 connect 方法

</t>
<t tx="leo.20180108114614.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114614.2"># W13

* 連接 (Conjunction) (C-&gt;K): 概念經過實際驗證, 成為知識空間的延伸, 此概念即脫離概念空間. 未被實際驗證的概念, 則留在概念空間之中

*分離 (Disjunction): (K-&gt;C): 由知識產生新構想, 反映出從知識到概念的轉換過程</t>
<t tx="leo.20180108114615.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114615.2"># W14

* 建立 Github 期末協同專案倉儲

*新增所有改版的內容

git commit -m "改版訊息"

*在所有的改版內容資料, 綁定身分與訊息

git push

*將近端所提交的改版資料推送到遠端

git pull</t>
<t tx="leo.20180108114617.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108114617.2"># W15~W16

*協力完成計算機程式

*分組期末報告製作
當遇到問題時可以提出，由下一位上傳者修正問題

</t>
<t tx="leo.20180108115541.1">&lt;section&gt;
    @others
&lt;/section&gt;


						
</t>
<t tx="leo.20180108115541.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20180108115541.3"># 我的心得

* 這次教到Git的網站，相比較fossil來說複雜很多，但是功能也多很多，而且可以多人協同，而不是一個人完成整件事情，如果不小心忽略錯誤，當下一位進行協同的人可以找出問題並進行修正，當自己遇到問題時也可以在網站上提問，實用性非常大。
</t>
<t tx="yen.20170108171605.1"></t>
<t tx="yen.20170108171605.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="yen.20170108171605.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="yen.20170108171622.1">2017 Fall 機械設計工程系 CADP &amp; CP

倉儲位置: https://mde1a1.kmol.info/2017fall

每一協同成員都應該要在 users 目錄下有一個 Leo 檔案

</t>
<t tx="yen.20170108171733.1"></t>
<t tx="yen.20170108171733.10">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;
2017 Spring 機械設計工程系網際內容管理
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="data/reveal/reveal.css"&gt;
    &lt;link rel="stylesheet" href="data/reveal/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="data/reveal/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'data/reveal/pdf.css' : 'data/reveal/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="data/reveal/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="yen.20170108171733.11">&lt;body&gt;
@others
&lt;script src="data/reveal/head.min.js"&gt;&lt;/script&gt;
&lt;script src="data/reveal/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'data/reveal/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'data/reveal/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'data/reveal/zoom.js', async: true },
                { src: 'data/reveal/notes.js', async: true },
                { src: 'data/reveal/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="yen.20170108171733.12">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="yen.20170108171733.13">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="yen.20170108171733.14">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20170108171733.15">## 計算機程式 期中

###投影片 
# 40623226

[我的網誌](blog/index.html)


</t>
<t tx="yen.20170108171733.16">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20170108171733.17"># W1-W3

* 了解設計是一種明確與具體的表達, 
* 表達具有   六種形式
-口語
-文字
-2D 
-3D
-數學
-實體表達
  
*機械設計意義
* 機: 精巧配置
* 械: 解決問題
* 設: 表達結果之具體規劃
* 計: 詳細思慮過程
  
* 了解利用fossil建立倉儲
   與編輯倉儲內容
</t>
<t tx="yen.20170108171733.2">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20170108171733.5"></t>
<t tx="yen.20170108171733.71"></t>
<t tx="yen.20170108171733.8">@language xml
@tabwidth -4
@others

</t>
<t tx="yen.20170108171733.81"></t>
<t tx="yen.20170108171733.83">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20170108171733.9">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="yen.20170108171930.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170108171939.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '2001:288:6004:17:3004::808'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170224232341.1"></t>
<t tx="yen.20170224232341.2"></t>
</tnodes>
</leo_file>
